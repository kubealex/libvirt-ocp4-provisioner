- name: Bastion services configuration
  hosts: bastion
  become: true
  vars_files:
    - vars/infra_vars.yml
    - vars/cluster_vars.yml
  tasks:
    - name: Ensuring tftp boot directory exists
      ansible.builtin.file:
        state: directory
        path: "{{ tftp_boot_root }}/pxelinux.cfg"
        mode: "0755"

    - name: Copy pxelinux.0 file
      ansible.builtin.copy:
        src: /usr/share/syslinux/{{ item }}
        dest: "{{ tftp_boot_root }}/"
        mode: "0755"
        remote_src: true
      loop: "{{ pxe_files }}"

    - name: Creating seelinux rules for dnsmasq service
      ansible.builtin.copy:
        src: files/my-dnsmasq.pp
        dest: /tmp
        mode: "0755"

    - name: Apply seelinux rules for dnsmasq service # noqa no-changed-when
      ansible.builtin.command: semodule -X 300 -i /tmp/my-dnsmasq.pp

    - name: Delete selinux temp file
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/my-dnsmasq.pp
        - /tmp/my-dnsmasq.te

    - name: Firing dnsmasq template
      ansible.builtin.template:
        src: templates/dnsmasq.j2
        dest: /etc/dnsmasq.conf
        mode: "0755"

    - name: Firing pxe boot template
      ansible.builtin.template:
        src: templates/pxeboot_mac.j2
        dest: "{{ tftp_boot_root }}/pxelinux.cfg/01-{{ hostvars[item].node_mac | replace(':', '-') }}"
        mode: "0755"
      loop: "{{ groups['masters'] }}"

    - name: Firing pxe boot template
      ansible.builtin.template:
        src: templates/pxeboot_mac.j2
        dest: "{{ tftp_boot_root }}/pxelinux.cfg/01-{{ hostvars[item].node_mac | replace(':', '-') }}"
        mode: "0755"
      loop: "{{ groups['bootstrap'] }}"

    - name: Firing pxe boot template
      ansible.builtin.template:
        src: templates/pxeboot_mac.j2
        dest: "{{ tftp_boot_root }}/pxelinux.cfg/01-{{ hostvars[item].node_mac | replace(':', '-') }}"
        mode: "0755"
      loop: "{{ groups['workers'] }}"

    - name: Configure interface to use bastion as DNS server # noqa no-changed-when
      ansible.builtin.command: nmcli con mod {{ host_interface }} ipv4.dns "{{ host_ip }}"

    - name: Refreshing inteface # noqa no-changed-when
      ansible.builtin.shell: nmcli con down "{{ host_interface }}"; nmcli con up "{{ host_interface }}"

    - name: Enable services
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - dnsmasq
        - nginx

    - name: Rebooting bastion
      ansible.builtin.reboot:
