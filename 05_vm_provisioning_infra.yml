- name: Provisioning infrastructure VMs
  hosts: vm_host
  vars_files:
    - vars/cluster_vars.yml
    - vars/infra_vars.yml
    - vars/libvirt.yml
  tasks:

    - ansible.builtin.set_fact:
        ocp_domain: "{{ cluster.name }}.{{ domain }}"

    - name: Ensure to clean known_hosts
      ansible.builtin.known_hosts:
        host: "{{ item.value[0].ip }}" 
        path: ~/.ssh/known_hosts
        state: absent
      loop: "{{ infra_nodes.host_list|dict2items }}"

    - name: Create ssh keypair
      community.crypto.openssh_keypair:
        path: "~/.ssh/id_rsa_ocp_setup"

    - name: Getting ssh public key
      slurp:
        src: ~/.ssh/id_rsa_ocp_setup.pub
      register: service_key

    - set_fact:
        sshServiceKey: "{{ service_key['content'] | b64decode }}"

    - name: Deploy bastion VM with terraform
      community.general.terraform:
        force_init: true
        project_path: "{{ workspace_directory.base_path }}/terraform/bastion"
        variables:
          libvirt_network: "{{ cluster.name }}"
          libvirt_pool: "{{ cluster.name }}"
          network_data: "{ hostIP = \"{{ infra_nodes.host_list.bastion[0].ip }}\", broadcast= \"{{ infra_nodes.host_list.bastion[0].ip | ipsubnet(24) | ipaddr('broadcast') }}\", dns = \"{{ infra_nodes.host_list.bastion[0].ip | ipsubnet(24) | ipaddr('network') | ipmath(1) }}\", gateway = \"{{ infra_nodes.host_list.bastion[0].ip | ipsubnet(24) | ipaddr('network') | ipmath(1) }}\", network = \"{{ infra_nodes.host_list.bastion[0].ip | ipsubnet(24) | ipaddr('network') }}\" }"
          hostname: "bastion"
          domain: "{{ domain }}"
          cluster_name: "{{ cluster.name }}"
          sshKey: "{{ sshServiceKey }}"
        state: present
      become: true
      register: output_ba

    - name: Deploy loadbalancer VM
      community.general.terraform:
        force_init: true
        project_path: "{{ workspace_directory.base_path }}/terraform/loadbalancer"
        variables:
          libvirt_network: "{{ cluster.name }}"
          libvirt_pool: "{{ cluster.name }}"
          network_data: "{ hostIP = \"{{ infra_nodes.host_list.loadbalancer[0].ip }}\", broadcast= \"{{ infra_nodes.host_list.loadbalancer[0].ip | ipsubnet(24) | ipaddr('broadcast') }}\", dns = \"{{ infra_nodes.host_list.loadbalancer[0].ip | ipsubnet(24) | ipaddr('network') | ipmath(1) }}\", gateway = \"{{ infra_nodes.host_list.loadbalancer[0].ip | ipsubnet(24) | ipaddr('network') | ipmath(1) }}\", network = \"{{ infra_nodes.host_list.loadbalancer[0].ip | ipsubnet(24) | ipaddr('network') }}\" }"
          hostname: "loadbalancer"
          domain: "{{ domain }}"
          cluster_name: "{{ cluster.name }}"
          sshKey: "{{ sshServiceKey }}"
        state: present
      become: true
      register: output_lb

    - name: Add bastion and loadbalancer to in-memory inventory
      ansible.builtin.add_host:
        hostname: '{{ item.key }}'
        ansible_host: '{{ item.value[0].ip }}'
        ansible_ssh_private_key_file: "id_rsa"
        ansible_user: ocpinstall
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        domain: "{{ domain }}"
        cluster_name: "{{ cluster.name }}"
        ocp_domain: "{{ ocp_domain }}"
        nfs_registry_enabled: "{{ nfs_registry }}"
        timezone: "{{ dhcp.timezone }}"
        ntp_server: "{{ dhcp.ntp }}"
      loop: "{{ infra_nodes.host_list|dict2items }}"


- name: Check connection to infra VMs and set facts
  hosts: bastion,loadbalancer
  gather_facts: no
  tasks:
    - name: Wait 600 seconds for target connection to become reachable/usable
      ansible.builtin.wait_for_connection: 
        timeout: 120
        delay: 0
    - ansible.builtin.ping:

    - ansible.builtin.setup:
      register: machine_facts

    - ansible.builtin.set_fact:
        host_ip: "{{ machine_facts.ansible_facts.ansible_default_ipv4.address }}"
        host_interface: "{{ machine_facts.ansible_facts.ansible_default_ipv4.interface }}"
        host_mac: "{{ machine_facts.ansible_facts.ansible_default_ipv4.macaddress }}"
        host_fqdn: "{{ machine_facts.ansible_facts.ansible_fqdn }}"
    
    - ansible.builtin.set_fact: 
        host_api_fqdn: "api.{{ ocp_domain }}"
        host_api_int_fqdn: "api-int.{{ ocp_domain }}"
        host_apps_fqdn: "apps.{{ ocp_domain }}"  
      when: inventory_hostname == 'loadbalancer'

