- name: Provisioning infrastructure VMs
  hosts: vm_host
  vars_files:
    - vars/cluster_vars.yml
    - vars/infra_vars.yml
  tasks:
    - name: Set ocp_domain as fact
      ansible.builtin.set_fact:
        ocp_domain: "{{ cluster.name }}.{{ domain }}"

    - name: Ensure to clean known_hosts
      ansible.builtin.known_hosts:
        host: "{{ item.value[0].ip }}"
        path: ~/.ssh/known_hosts
        state: absent
      loop: "{{ infra_nodes.host_list | dict2items }}"
      delegate_to: localhost

    - name: Deploy bastion VM with terraform
      community.general.terraform:
        force_init: true
        project_path: "{{ workspace_directory.base_path }}/{{ cluster.name }}/terraform/bastion"
        variables:
          libvirt_network: "{{ cluster.name }}"
          libvirt_pool: "{{ cluster.name }}"
          network_data: '{ hostIP = "{{ infra_nodes.host_list.bastion[0].ip }}", broadcast= "{{ infra_nodes.host_list.bastion[0].ip | ansible.utils.ipsubnet(24) | ansible.utils.ipaddr(''broadcast'') }}", dns = "{{ infra_nodes.host_list.bastion[0].ip | ansible.utils.ipsubnet(24) | ansible.utils.ipaddr(''network'') | ansible.utils.ipmath(1) }}", gateway = "{{ infra_nodes.host_list.bastion[0].ip | ansible.utils.ipsubnet(24) | ansible.utils.ipaddr(''network'') | ansible.utils.ipmath(1) }}", network = "{{ infra_nodes.host_list.bastion[0].ip | ansible.utils.ipsubnet(24) | ansible.utils.ipaddr(''network'') }}" }' # noqa yaml[line-length]
          hostname: "bastion"
          domain: "{{ domain }}"
          cluster_name: "{{ cluster.name }}"
          sshkey: "{{ ssh_service_key_pub }}"
        state: present
      become: true
      register: output_ba

    - name: Deploy loadbalancer VM
      community.general.terraform:
        force_init: true
        project_path: "{{ workspace_directory.base_path }}/{{ cluster.name }}/terraform/loadbalancer"
        variables:
          libvirt_network: "{{ cluster.name }}"
          libvirt_pool: "{{ cluster.name }}"
          network_data: '{ hostIP = "{{ infra_nodes.host_list.loadbalancer[0].ip }}", broadcast= "{{ infra_nodes.host_list.loadbalancer[0].ip | ansible.utils.ipsubnet(24) | ansible.utils.ipaddr(''broadcast'') }}", dns = "{{ infra_nodes.host_list.loadbalancer[0].ip | ansible.utils.ipsubnet(24) | ansible.utils.ipaddr(''network'') | ansible.utils.ipmath(1) }}", gateway = "{{ infra_nodes.host_list.loadbalancer[0].ip | ansible.utils.ipsubnet(24) | ansible.utils.ipaddr(''network'') | ansible.utils.ipmath(1) }}", network = "{{ infra_nodes.host_list.loadbalancer[0].ip | ansible.utils.ipsubnet(24) | ansible.utils.ipaddr(''network'') }}" }' # noqa yaml[line-length]
          hostname: "loadbalancer"
          domain: "{{ domain }}"
          cluster_name: "{{ cluster.name }}"
          sshkey: "{{ ssh_service_key_pub }}"
        state: present
      become: true
      register: output_lb

    - name: Add bastion and loadbalancer to in-memory inventory
      ansible.builtin.add_host:
        hostname: "{{ item.key }}"
        ansible_host: "{{ item.value[0].ip }}"
        ansible_ssh_private_key_file: "{{ playbook_dir }}/id_rsa_ocp_setup"
        ansible_user: ocpinstall
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        domain: "{{ domain }}"
        cluster_name: "{{ cluster.name }}"
        ocp_domain: "{{ ocp_domain }}"
        timezone: "{{ dhcp.timezone }}"
        ntp_server: "{{ dhcp.ntp }}"
      loop: "{{ infra_nodes.host_list | dict2items }}"
      delegate_to: localhost

- name: Check connection to infra VMs and set facts
  hosts: bastion,loadbalancer
  gather_facts: false
  tasks:
    - name: Wait 600 seconds for target connection to become reachable/usable
      ansible.builtin.wait_for_connection:
        timeout: 120
        delay: 0
    - name: Verify the host can be reached
      ansible.builtin.ping:

    - name: Save host facts
      ansible.builtin.setup:
      register: machine_facts

    - name: Fetch specific facts for further use
      ansible.builtin.set_fact:
        host_ip: "{{ machine_facts.ansible_facts.ansible_default_ipv4.address }}"
        host_interface: "{{ machine_facts.ansible_facts.ansible_default_ipv4.interface }}"
        host_mac: "{{ machine_facts.ansible_facts.ansible_default_ipv4.macaddress }}"
        host_fqdn: "{{ machine_facts.ansible_facts.ansible_fqdn }}"

    - name: Fetch specific facts for further use
      ansible.builtin.set_fact:
        host_api_fqdn: "api.{{ ocp_domain }}"
        host_api_int_fqdn: "api-int.{{ ocp_domain }}"
        host_apps_fqdn: "apps.{{ ocp_domain }}"
      when: inventory_hostname == 'loadbalancer'
